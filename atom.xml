<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>h7lyaphets</title>
  
  <subtitle>学习分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-22T01:42:32.959Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>h7lyaphets</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Design Patterns --Java</title>
    <link href="http://yoursite.com/2019/01/15/Design-Patterns-Java/"/>
    <id>http://yoursite.com/2019/01/15/Design-Patterns-Java/</id>
    <published>2019-01-15T06:06:05.000Z</published>
    <updated>2019-01-22T01:42:32.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h5 id="设计模式一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。"><a href="#设计模式一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。" class="headerlink" title="设计模式一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。"></a>设计模式一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</h5><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a><label style="color:purple">设计模式的分类</label></h2><p>总体来说设计模式分为三大类：</p><ul><li>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li><li>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li><li>行为型模式，共十一种：策略模式，模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li><li>其实还有两类：并发型模式和线程池模式。用一个图片整体描述一下。<br>插图：<img src="/2019/01/15/Design-Patterns-Java/allRelation.jpg" alt="设计模式之间的关系"></li></ul><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a><label style="color:purple">设计模式的六大原则</label></h2><h3 id="1、开闭原则（Open-Close-Principle）"><a href="#1、开闭原则（Open-Close-Principle）" class="headerlink" title="1、开闭原则（Open Close Principle）"></a>1、开闭原则（Open Close Principle）</h3><p>开闭原则就是说对<strong> 扩展开放，对修改关闭 </strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h3 id="2、里氏代换原则（Liskov-Substitution-Principle）"><a href="#2、里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2、里氏代换原则（Liskov Substitution Principle）"></a>2、里氏代换原则（Liskov Substitution Principle）</h3><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。  来源<a href="https://baike.baidu.com/item/%E9%87%8C%E6%B0%8F%E4%BB%A3%E6%8D%A2%E5%8E%9F%E5%88%99/3104388" target="_blank" rel="noopener">百度百科</a></p><h3 id="3、依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3、依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3、依赖倒转原则（Dependence Inversion Principle）"></a>3、依赖倒转原则（Dependence Inversion Principle）</h3><p>这是开闭原则的基础，具体内容：针对<strong>接口编程</strong>，依赖于<strong>抽象</strong>而不依赖于具体。</p><h3 id="4、接口隔离原则（Interface-Segregation-Principle）"><a href="#4、接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4、接口隔离原则（Interface Segregation Principle）"></a>4、接口隔离原则（Interface Segregation Principle）</h3><p>~：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这我们可以看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，<strong>为了升级和维护方便</strong>。总的来说，也是多次出现的：<strong><em><label style="color:red">降低依赖，降低耦合。</label></em></strong></p><h3 id="5、迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#5、迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="5、迪米特法则（最少知道原则）（Demeter Principle）"></a>5、迪米特法则（最少知道原则）（Demeter Principle）</h3><p>~：一个实体应当尽量少的与其他实体之间发生相互做哟好难过，使得系统功能模块相对独立。</p><h3 id="6、合成复用原则（Composite-Reuse-Principle）"><a href="#6、合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6、合成复用原则（Composite Reuse Principle）"></a>6、合成复用原则（Composite Reuse Principle）</h3><p>尽量使用<strong>合成/聚合</strong>的方式，而不是使用继承。</p><h3 id="小结：其实从设计模式的六大原则，可以看出目的是，降低耦合度，提升复用率这类思想，接下来就是针对设计模式进行应用场景的分析。"><a href="#小结：其实从设计模式的六大原则，可以看出目的是，降低耦合度，提升复用率这类思想，接下来就是针对设计模式进行应用场景的分析。" class="headerlink" title="小结：其实从设计模式的六大原则，可以看出目的是，降低耦合度，提升复用率这类思想，接下来就是针对设计模式进行应用场景的分析。"></a>小结：其实从设计模式的六大原则，可以看出目的是，<strong>降低耦合度，提升复用率</strong>这类思想，接下来就是针对设计模式进行应用场景的分析。</h3><h2 id="JAVA的23钟设计模式"><a href="#JAVA的23钟设计模式" class="headerlink" title="JAVA的23钟设计模式"></a><label style="color:purple">JAVA的23钟设计模式</label></h2><h3 id="1、工厂设计模式（Factory-Method）"><a href="#1、工厂设计模式（Factory-Method）" class="headerlink" title="1、工厂设计模式（Factory Method）"></a>1、工厂设计模式（Factory Method）</h3><ul><li>工厂设计模式分为三种：<h4 id="1-普通工厂模式：建立一个工厂类，对实现了统一接口的一些类进行实例的创建。下为关系图："><a href="#1-普通工厂模式：建立一个工厂类，对实现了统一接口的一些类进行实例的创建。下为关系图：" class="headerlink" title="1) 普通工厂模式：建立一个工厂类，对实现了统一接口的一些类进行实例的创建。下为关系图："></a>1) 普通工厂模式：建立一个工厂类，对实现了统一接口的一些类进行实例的创建。下为关系图：</h4><img src="/2019/01/15/Design-Patterns-Java/factory1.PNG" alt="普通工厂模式关系图"><br>举例：（一个发送邮件和短信的例子）<br><br>首先，创建二者的共同接口：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>其次，创建实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sends</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"this is mailsender!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"this is sms sender!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，创建工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"mail"</span>.equals(type))&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"sms"</span>.equals(type))&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"incorrect type ."</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正常测试<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">SendFactory factory = <span class="keyword">new</span> SendFactory();</span><br><span class="line">Sender sender = factory.produce(<span class="string">"sms"</span>);</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果为；</p><blockquote><p>this is sms sender!</p></blockquote><h4 id="2-多个工厂方法模式"><a href="#2-多个工厂方法模式" class="headerlink" title="2) 多个工厂方法模式"></a>2) 多个工厂方法模式</h4><p>是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：<br><img src="/2019/01/15/Design-Patterns-Java/multiFactory.png" alt="多个工厂模式关系图"><br>将上面的代码做下修改，改动下SendFactory类就行，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在测试类中，对应实例化工厂类，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SendFactory factory = <span class="keyword">new</span> SendFactory();</span><br><span class="line">Sender sender = factory.produceMail();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果为；</p><blockquote><p>this is mailsender!</p></blockquote><h4 id="3-静态工厂方法模式"><a href="#3-静态工厂方法模式" class="headerlink" title="3)静态工厂方法模式"></a>3)静态工厂方法模式</h4><p>上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。其他代码不用改动，在测试类中代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sender sender = SendFactory.produceMail();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果为；</p><blockquote><p>this is mailsender!</p></blockquote><p>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用<strong>第三种——静态工厂方法模式</strong>。</p><hr><p>未完，待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h5 id=&quot;设计模式一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。&quot;&gt;&lt;a href=&quot;#设计模式一套被反复使用、多数人知
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="系统架构" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Next配合GitHub Pages创建个人博客</title>
    <link href="http://yoursite.com/2019/01/10/Hexo-Next%E9%85%8D%E5%92%8CGitHub-Pages%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/</id>
    <published>2019-01-10T07:52:09.000Z</published>
    <updated>2019-01-15T07:03:29.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h1><hr><p>首先安装Node.js，参考地址:<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载安装Node.js</a>， 接着安装git，参考地址：<a href="http://git-scm.com/download/" target="_blank" rel="noopener">下载安装git</a>，Mac OS直接使用terminal即可，Windows可以选择使用<a href="https://git-scm.com/download/gui/windows" target="_blank" rel="noopener">Git Gui</a>。这些的安装过程就不在详述。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/test1.png" alt="哈哈哈测试一下md添加图片-图文无关"></h2><p>接下来就要面对重头戏 <label style="color:red">  Hexo </label>的安装。首先通过terminal进入到自己想要的目录。<br><br> <code>:~$ cd Documents/githubPages/</code>，到达指定目录后，安装<code>hexo</code><br><br><code>:~/Documents/githubPages$ npm install hexo-cli -g</code><br>图片中我使用的国内的镜像源，速度快<del>了不是</del>很多<br><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/installHexoSucceed.png" alt="安装Hexo成功">可以使用<code>:~/Documents/githubPages/Hexo-Next/blog$ hexo -V</code>命令来查看安装的所有包。<img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/hexoV.png" alt="hexo -V"><br>接着使用<code>hexo init blog</code>命令初始化博客文件夹(blog名字随意来)。<img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/hexoDone.png" alt="hexo-init"><br><br>接下来<code>cd blog</code>为这个环境添加依赖<code>npm install</code>,由于我已经安装过了，所以图里显示的比较少。<br><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/npmInstall.png" alt="示意npm install"><br>这时在我看来其实已经算完成了。<br>在<code>blog</code>目录下，输入<code>hexo g</code>（<code>hexo generate</code>）目的为生成静态文件，会在当前目录下生成一个新的叫public的文件夹。接着输入<code>hexo s</code>(<code>hexo server</code>)目的启动本地服务，作为调试预览。如下图。<img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/hexoGS.png" alt="hexo g &amp; hexo s">浏览器查看<br><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/4000.png" alt="本地查看"><br><br>好了，到此环境相关就搞定了，也基本完成了一大半。</p><h1 id="Hexo主题选择"><a href="#Hexo主题选择" class="headerlink" title="Hexo主题选择"></a>Hexo主题选择</h1><p>  关于Hexo中的主题有很多，我在目前使用过两个一个是<code>Yilia</code>另一个也就是目前用的<code>Next</code>。这里以<code>Next</code>为例。<br>  <br><br>  输入命令<code>:~/Documents/githubPages/Hexo-Next/blog$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code>切记都是在blog目录下进行的。<br><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/installNext.png" alt="install Next"><br><br>接下来在blog目录下的themes文件夹里已经有了<code>Next</code>，这说明啥，当然是安装好了😂，其中这里<strong><em> 提示一点 </em></strong> <code>Next/_config.yml</code>和<code>blog/_config.yml</code>都为配置文件，前者为<code>Next</code>主题的配置文件，后者则为博客的基本配置（包括还未说到部署到GitHub Pages的配置）。既然已经安装好了<code>Next</code>，打开<code>vim _config.yml</code> ，注意是<strong> blog目录下的配置文件 </strong>。修改，其中<code>themes</code>一行为 <code>themes: next</code>这里需要注意<strong>「 : 」  </strong>后面是有一个空格的。<br><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/themes.png" alt="设置主题为next"> <br><br>这是运行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 然后看看本地起的服务是否已经和最开始的主体不一样了，说明主题已经选择成功了。</p><h1 id="GitHub-Pages创建"><a href="#GitHub-Pages创建" class="headerlink" title="GitHub Pages创建"></a>GitHub Pages创建</h1><p>关于在GitHub上创建你的用户名的一个仓库例如<code>username.github.io</code>,切记username和你的用户名一样，比如你叫<code>sunwukong</code>名称就为<code>sunwukong.github.io</code>，不会要被谢罪吧。哦对了，如果在电脑没配过ssh key的可以看下这个<a href="https://blog.csdn.net/u014103733/article/details/79190004" target="_blank" rel="noopener">GitHub添加ssh key</a>，随便找了一篇博客，都是大概这个意思。其实创建完<code>username.github.io</code>就可以直接输入到浏览器看到相应内容了。</p><h1 id="通过Hexo部署到GitHub-Pages"><a href="#通过Hexo部署到GitHub-Pages" class="headerlink" title="通过Hexo部署到GitHub Pages"></a>通过Hexo部署到GitHub Pages</h1><p>最后一步，也是最重要一步，如果把每次的变动更新到GitHub上。首先上GitHub，点开你的<code>username.github.io</code>仓库，把地址拷贝出来<br><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/sshUrl.png" alt="2019年01月10日15:38:49">然后在<code>blog</code>目录下打开配置文件<code>vim _config.yml</code> 在<code>deploy:</code>下填写对应方式，以及相应地址。如下图所示<img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/gitRepo.png" alt="type and repo ">至此算是配置成功。以后在每次添加新文章，或是有什么改动，分别运行 <code>hexo clean</code>、<code>hexo g</code>、<code>hexo d</code> 也可以<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>效果如下图所示<img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/triLine.png" alt="deploy">这几个命令的作用可以去网上搜一搜我就不赘述了。哦对了，在使用<code>hexo deploy</code>这个命令之前需要提前安装一个拓展 <code>npm install hexo-deployer-git --save</code>。每次有所改动，直接<strong><em> <del>素质</del>三连 </em></strong> 即可。</p><h1 id="主题添加fork-me和-rss"><a href="#主题添加fork-me和-rss" class="headerlink" title="主题添加fork me和 rss"></a>主题添加fork me和 rss</h1><p>在<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">GitHub Ribbons</a>或<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a>选择一款挂饰，拷贝方框内的代码。<br><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/hold.png" alt="挂件"><br><br><br>将刚刚复制的挂饰代码，添加到<code>Blog/themes/next/layout/_layout.swig</code>文件中，添加位置如下图所示(放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下方)：<br><img src="/2019/01/10/Hexo-Next配和GitHub-Pages创建个人博客/holdAdd.png" alt="配置位置"></p><hr><p>接下来添加rss订阅。首先添加Hexo插件<code>npm install --save hexo-generator-feed</code>，安装成功后，更改博客配置文件，在对应位置添加<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure></p><p>接着在配置主题的配置文件中对应位置更改，添加<code>/atom.xml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span> <span class="string">//注意：有一个空格</span></span><br></pre></td></tr></table></figure></p><p>至此就完成了，添加fork me和rss的功能。</p><h1 id="添加tags和categories"><a href="#添加tags和categories" class="headerlink" title="添加tags和categories"></a>添加tags和categories</h1><ul><li><p>首先创建Tag页面<code>:$ hexo new page &quot;tags&quot;</code>，这时在你的<code>/blog/source/</code>目录下有了刚刚创建的<code>tags</code>的文件夹里面包括<code>index文件夹</code>和<code>index.md</code>，这时我们要操作这个<code>index.md</code>文件，修改为一下内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2019-01-15 13:31:28</span><br><span class="line">type: tags</span><br></pre></td></tr></table></figure></li><li><p>接着创建categories，执行命令<code>:$ hexo new page &quot;categories&quot;</code>，在source目录下有了<code>categories</code>的文件夹里面包括<code>index文件夹</code>和<code>index.md</code>，这时我们要操作这个<code>index.md</code>文件，修改为一下内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2019-01-15 13:34:36</span><br><span class="line">type: "categories"</span><br></pre></td></tr></table></figure></li><li><p>最后将<code>tag</code>和<code>category</code>添加到菜单中，打开<code>nexT</code>的主题配置文件，在<code>menu</code>中添加<code>tags</code>和<code>categories</code>，如一下代码所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  # about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br></pre></td></tr></table></figure></li><li><p>在以后添加文章的时候，标题一栏中的tags，加上对应的标签即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: xxx</span><br><span class="line">date: 2019-01-10 15:52:09</span><br><span class="line">tags: [Hexo,blog,github Pages]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运行环境配置&quot;&gt;&lt;a href=&quot;#运行环境配置&quot; class=&quot;headerlink&quot; title=&quot;运行环境配置&quot;&gt;&lt;/a&gt;运行环境配置&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;首先安装Node.js，参考地址:&lt;a href=&quot;https://nodejs.org/en/d
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="github Pages" scheme="http://yoursite.com/tags/github-Pages/"/>
    
  </entry>
  
</feed>
